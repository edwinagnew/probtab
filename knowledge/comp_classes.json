{
    "classes": 
    [
        {
            "name": "P", "shortDescription":"Polynomial time", "family":"Time",
            "informalDefinition":"Easy Peasy", 
            "formalDefinition":"The class of decision problems solved by a polynomial time Turing machine.", 
            "extraInfos": [
                "The most fundamental complexity class. The home of tractable algorithms.", 
                "Considered to capture the notion of efficient deterministic computation.",
                "Even though a complexity of $$O(n^{1000})$$ appears untractable, once a problem is in P it is often the case that the constant factors can be trimmed down."],
             "includes":["LP", "SORTED", "PRIME"]
        },  
        
        {
            "name": "PSPACE", "shortDescription":"Polynomial space",  "family":"Space",
            "formalDefinition":"The class of decision problems solved by a Turing machine using polynomial space.",
            "extraInfos":[
                "Contains the generalisations of many familiar games. Intuitively, this is because one can simulate all possible branches of a game in polynomial space.",
                "Goes well beyond the reach of efficient computation.",
                "Clearly $$P \\subseteq PSPACE$$. Intuively, space is more powerful than time because space can be re-used so one expects $$P \\neq PSPACE$$. This remains unproven and is perhaps the most glaring sign of complexity theory's immaturity.",
                "By an important result called Savitch's theorem, $$PSPACE = NSPACE$$ so non-determinism does not improve the capabilities of space.",
                "Equals IP - the class of interactive proofs!"
            ],
            "includes":["QBF (complete)"]
        },

        {
            "name": "NP", "shortDescription":"Non-deterministic polynomial time",  "family":"Alternation",
            "informalDefinition":"Efficiently verifiable problems", 
            "formalDefinition":"The class of decision problems solved by a polynomial time non-deterministic Turing machine", 
            "extraInfos":[
                "The second most fundamental complexity class.",
                "Whether $$P=NP$$ is the largest open problem in complexity theory.",
                "An equivalent definition is the class of languages $$L$$ such that $$x \\in L$$ iff there exists some string y such that M(x, y) accepts in deterministic polynomial time (rewrite)"],
            "includes":["SAT (complete)", "HAMPATH (complete)"]
        },
        {
            "name":"coNP", "shortDescription":"complement of NP",  "family":"Alternation",
            "informalDefinition":"Efficiently falsifiable problems",
            "formalDefinition":"The class of languages $$L$$ such that $$x \\notin L$$ iff there exists some string y such that M(x, y) rejects in deterministic polynomial time",
            "extraInfos":[
                "Along with NP, forms the foundation of the polynomial hierarchy."
            ],
            "includes":["unSAT (complete)"]
        },

        {
            "name": "BPP", "shortDescription":"Bounded-error probabilistic polynomial time",  "family":"Random",
            "informalDefinition":"Efficient probabilistically solvable problems",
            "formalDefinition":"The class of languages $$L$$ such that there exists some probabilistic polynomial-time Turing machine $$M$$ such that:\n1. $$x \\in L \\implies Pr[M(x) = 1] \\geq 2/3$$\n2. $$x \\notin L \\implies Pr[M(x) = 1] \\leq 2/3$$",
            "extraInfos":[
                "The choice of $$1/3$$ error probability is completely arbitrary. Smaller error probabilities can be achieved by repeated runs and taking a majority vote.",
                "It is widely believed that $$P = BPP$$, which is known as the derandomisation conjecture. "
            ],
            "includes":["PIT"]
        },

        {
            "name": "RP", "shortDescription":"Randomised polynomial time",  "family":"Random",
            "informalDefinition":"Probabilistic polynomial time where YES is always right",
            "formalDefinition":"The class of languages $$L$$ such that there exists some probabilistic polynomial-time Turing machine $$M$$ such that:\n1. $$x \\in L \\implies Pr[M(x) = 1] \\geq 1/2$$\n2. $$x \\notin L \\implies Pr[M(x) = 1] = 0$$",
            "extraInfos":[
                "The choice of $$1/2$$ error probability is completely arbitrary. Smaller error probabilities can be achieved by repeated runs and taking a majority vote."
            ],
            "includes":[]
        },

        {
            "name": "coRP", "shortDescription":"complement of RP",  "family":"Random",
            "informalDefinition":"Probabilistic polynomial time where NO is always right",
            "formalDefinition":"The class of languages $$L$$ such that there exists some probabilistic polynomial-time Turing machine $$M$$ such that:\n1. $$x \\in L \\implies Pr[M(x) = 1] = 1$$\n2. $$x \\notin L \\implies Pr[M(x) = 1] \\leq 1/2$$",
            "extraInfos":[
                "As with RP, the choice of $$1/2$$ error probability is completely arbitrary. Smaller error probabilities can be achieved by repeated runs and taking a majority vote."
            ],
            "includes":["PIT"]
        },

        {
            "name": "PP", "shortDescription":"Probabilistic polynomial time",  "family":"Random",
            "formalDefinition":"The class of languages $$L$$ such that there exists some probabilistic polynomial-time Turing machine $$M$$ such that:\n1. $$x \\in L \\implies Pr[M(x) = 1] > 1/2$$\n2. $$x \\notin L \\implies Pr[M(x) = 1] < 1/2$$",
            "extraInfos":[
                "The choice of $$1/2$$ error probability is completely arbitrary. Other error probabilities can be achieved by repeated runs and taking a majority vote.",
                "The difference between the YES probability and the NO probability may be arbtirary small. This is what allows the inclusion of NP and what makes this class intractable.",
                "Equals PostBQP - quantum circuits with post-selection"
            ],
            "includes":[]
        },

        

        {
            "name": "BQP", "shortDescription":"Bounded-error quantum polynomial time",  "family":"Quantum",
            "informalDefinition":"Efficienty quantumly solvable problems",
            "formalDefinition":"The class of languages $$L$$ such that there exists a family of quantum circuits $$\\{Q_n\\}$$ on $$n$$ qubits such that for every $$x$$ of size $$n$$:\n1. $$x \\in L \\implies Pr[Q_n(x) = 1] \\geq 2/3$$\n2. $$x \\notin L \\implies Pr[Q_n(x) = 1] \\leq 1/3$$",
            "extraInfos":[
                "The quantum generalisation of BPP",
                "The utility of quantum computers effectively depends on the conjecture $$P \\neq BQP$$. Proving this seems currently intractable, since it would imply $$P \\neq PSPACE$$, a much more fundamental open problem"
            ],
            "includes":["FACTOR"]
        },
        
        {"name": "PH", "shortDescription":"Polynomial hierarchy",  "family":"Alternation"},
        {"name": "IP", "shortDescription":"Interactive Proof", "family":"Interaction"},
        {"name": "P^{#P}", "shortDescription":"Counting P",  "family":"Counting"},
        {"name": "EXP", "shortDescription":"Exponential time", "family":"Time"},
        {"name": "L", "shortDescription":"Log space", "family":"Space"}
        
    ],

    "relations":
    {
        "old_inclusions":
        [   
            {"from": "L", "to": "P", "info": {}},
            
            
            {"from": "NP", "to": "PH", "info": {}},
            {"from": "coNP", "to": "PH", "info": {}},

            {"from": "P", "to":"RP", "info":{}},
            {"from": "RP", "to":"NP", "info":{}},
            {"from": "P", "to":"coRP", "info":{}},
            {"from": "coRP", "to":"coNP", "info":{}},
            {"from": "RP", "to":"BPP", "info":{}},
            {"from": "coRP", "to":"BPP", "info":{}},
            {"from": "BPP", "to":"BQP", "info":{}},
            {"from": "BQP", "to":"PP", "info":{}},
            {"from": "NP", "to":"PP", "info":{}},
            {"from": "coNP", "to":"PP", "info":{}},

            
            {"from": "PSPACE", "to": "EXP", "info": {}},
            {"from": "PH", "to": "PSPACE", "info": {}},
            {"from": "PP", "to": "PSPACE", "info": {}}
        ],
        "_randomcomment": "shouldnt be exhaustive list of all inclusions. Should have some basic ones that can be easily checked",
        "inclusions":
        [
            {"from":"P", "to":"EXP", "complicatedness":0, "strictness":"Known to be strict due to the deterministic time hierarchy theorem"},
            {"from":"L", "to":"PSPACE", "complicatedness":0, "strictness":"Known to be strict due to the space hierarchy theorem"},
            {"from":"P", "to":"PSPACE", "complicatedness":0},
            {"from":"NP", "to":"PSPACE", "complicatedness":0},
            {"from":"coNP", "to":"PSPACE", "complicatedness":0},
            {"from":"BPP", "to":"PSPACE", "complicatedness":0},
            {"from":"P", "to":"RP", "complicatedness":0},
            {"from":"P", "to":"coRP", "complicatedness":0},
            {"from":"P", "to":"NP", "complicatedness":0},
            {"from":"P", "to":"coNP", "complicatedness":0},
            {"from":"P", "to":"BPP", "complicatedness":0},
            {"from":"NP", "to":"PH", "complicatedness":0},
            {"from":"coNP", "to":"PH", "complicatedness":0},
            
            {"from":"RP", "to":"BPP", "complicatedness":1},
            {"from":"coRP", "to":"BPP", "complicatedness":1},
            {"from":"BPP", "to":"PP", "complicatedness":1},
            {"from":"NP", "to":"PP", "complicatedness":1},
            {"from":"coNP", "to":"PP", "complicatedness":1},
            {"from":"L", "to":"P", "complicatedness":1, "info":"Using only $$O(\\log n)$$ space, a Turing machine can go through only $$2^{O(\\log n)} = poly(n)$$ different configurations before repeating itself"},
            {"from":"PSPACE", "to":"EXP", "complicatedness":1, "info":"Similar to $$L \\subseteq P$$, a PSPACE machine cannot go through more than $$2^{poly(n)}$$ configurations before repeating itself"},
            {"from":"RP", "to":"NP", "complicatedness":1, "info":"NP can be thought of as being RP where the acceptance probability is merely non-zero"},
            {"from":"coRP", "to":"coNP", "complicatedness":1, "info":"coNP can be thought of as being coRP where the rejection probability is merely non-zero"},
            {"from":"BPP", "to":"BQP", "complicatedness":1, "info":"A quantum computer can easily simulate deterministic computation and use superposition to simulate randomness"},
            {"from":"BQP", "to":"PSPACE", "complicatedness":1, "info":"Every amplitude of the quantum state can be simulated in polynomial space"},
            {"from":"P^{#P}", "to":"PSPACE", "complicatedness":1, "info":"Trying all possible inputs, keeping track of the number of accepting solutions can be done in PSPACE"},
            {"from":"PP", "to":"PSPACE", "complicatedness":1, "info":"Trying all possible inputs, keeping track of the number of accepting solutions can be done in PSPACE"},
            {"from":"IP", "to":"PSPACE", "complicatedness":1, "info":"Simulating all possible prover messages can be done in polynomial space, since the verifier is polynomially bounded"},

            {"from":"BQP", "to":"P^{#P}", "complicatedness":3, "info":"Proven in [cite BernsteinVazirani]"},
            {"from":"BQP", "to":"PP", "complicatedness":3, "info":"Proven in [cite Adelman et al]"},
            {"from":"PH", "to":"P^{#P}", "complicatedness":3, "info":"Toda's Theorem"},
            {"from":"PP", "to":"P^{#P}", "complicatedness":1, "info":"#P can count all solutions check greater than 1/2"},
            {"from":"BPP", "to":"PH", "complicatedness":3, "info":"$$\\mathsf{BPP} \\subseteq \\mathsf{\\Sigma_2} \\cap \\mathsf{\\Pi_2}$$ [Sipser-Lautemann]"}
            
            


        ],
        "collapses":
        [
            {"if": ["NP", "P"], "then": ["PH", "P"], "info":{"proof": "polynomial hierarchy collapse"}}
        ]
    }
}